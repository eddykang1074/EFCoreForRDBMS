
===========================================================
1)ASP.NET CORE 8.0.11 MVC 프로젝트 생성 및 주요 개발 참고 링크 
===========================================================
- .NET Core 8.0(LTS) 기반 개발 
- .NETCore 8.0.11  기반 개발 
- ASP.NET Core 8.0.11 버전 사용


.NET8 릴리즈발표 : 2023/11월
https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/


ASP.NET Core 8.0 
https://learn.microsoft.com/ko-kr/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-8.0

MVC 
https://learn.microsoft.com/ko-kr/aspnet/core/mvc/overview?view=aspnetcore-8.0


.NET9 릴리즈발표 링크 및 주요내용 : 2024/11월
https://devblogs.microsoft.com/dotnet/announcing-dotnet-9/

ASP.NET Core 9.0
https://learn.microsoft.com/ko-kr/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-9.0





===========================
2)EF Core 8 기초 정보 -공통
===========================


ASP.NET CORE MVC for EF Core 8 
https://learn.microsoft.com/ko-kr/aspnet/core/data/ef-mvc/?view=aspnetcore-8.0

EF Core 8.0 시작하기
https://www.dotnetnote.com/docs/efcore/efcore-getting-started/


EF Core  데이터베이스 공급자
https://learn.microsoft.com/ko-kr/ef/core/providers/?tabs=dotnet-core-cli

EF Core8 공용 패키지 설치하기 
프로젝트 선택 > Nuget 패키지 관리자선택 > 하기 3개 패키지 프로젝트에 설치하기 

Microsoft.EntityFrameworkCore 8.0.11 설치 
Microsoft.EntityFrameworkCore.Design 8.0.11 설치 
Microsoft.EntityFrameworkCore.Tools 8.0.11 설치 


EF CORE DATABASE 공급자 주요 정보  
https://learn.microsoft.com/ko-kr/ef/core/providers/?tabs=dotnet-core-cli






=======================================
3)EF Core 8.0.11 For MS SQL Server 
=======================================

** 하기 EF CORE 공통 패키지 필수 설치 후 진행하기
Microsoft.EntityFrameworkCore 8.0.11 설치 
Microsoft.EntityFrameworkCore.Design 8.0.11 설치 
Microsoft.EntityFrameworkCore.Tools 8.0.11 설치 


Step1) MS SQL 서버용 EF Core8 패키지 설치하기 

Microsoft.EntityFrameworkCore.SqlServer 8.0.11 설치 



Step2) 모델 클래스 생성하기 
Models/Channel.cs

    public class Channel
    {
        public int ChannelIdx { get; set; }

        public string ChannelName { get; set; }
        public string? ChannelDesc { get; set; }

        ...

        public int? ModifyMemberIdx { get; set; }
        public DateTime? ModifyDate { get; set; }
    }



Step3) DBContext 클래스 구현하기 
-Models/ChatAppDbContext.cs
  using Microsoft.EntityFrameworkCore;
  public class ChatAppDbContext : DbContext
  {
       public ChatAppDbContext(DbContextOptions<ChatAppDbContext> options) : base(options)
        {
        }
              
       public DbSet<Channel> Channels { get; set; }

       protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            //channel 테이블 정의
            modelBuilder.Entity<Channel>(entity =>
            {
                entity.ToTable("channels");

                entity.Property(e => e.ChannelIdx).UseIdentityColumn();
                entity.Property(e => e.ChannelIdx).HasColumnName("channel_idx");
                entity.HasKey(e => e.ChannelIdx).HasName("channel_pk");

                entity.Property(e => e.ChannelName).HasColumnName("channel_name").HasMaxLength(100);
                entity.Property(e => e.ChannelDesc).HasColumnName("channel_desc").HasMaxLength(500).IsRequired(false);
                 .....

                entity.Property(e => e.ModifyMemberIdx).HasColumnName("modify_member_idx").IsRequired(false);
                entity.Property(e => e.ModifyDate).HasColumnName("modify_date").IsRequired(false);

            });
        }
      
  }

Step4) DB연결 설정파일 구성하기 
- appsettings.json 

   "ConnectionStrings": {
        "DefaultConnection": "Data Source=EDDYKANG;Initial Catalog=corechatapp;Integrated Security=false;user id=test;password=eddy524640!;TrustServerCertificate=Yes;Encrypt=False;"
    }


Step5) 시작 모듈에 DBContext 서비스 의존성 주입처리 
-Program.cs 

using EFCoreForMSSQL.Models;
using Microsoft.EntityFrameworkCore;

string? rdbConString = builder.Configuration.GetConnectionString("DefaultConnection");

builder.Services.AddDbContext<ChatAppDbContext>(c => c.UseSqlServer(rdbConString));



Step6) Code First방식으로 물리적 테이블 생성하기 
dotnet-ef CLI툴설치하기 
https://learn.microsoft.com/en-us/ef/core/cli/dotnet

도구>Nuget 팩키지 관리자 콘솔에서 실행
dotnet tool install --global dotnet-ef --version 8.0.11

dotnet-ef 설치여부확인하기 
dotnet ef 

cd ls
cd 프로젝트로 이동 

dotnet ef migrations add InitialCreate -o Models/Migrations

dotnet ef database update


Step7) 데이터베이스에 테이블 생성여부 확인하기 






=========================================
4)EF Core 8.0.11 For PostgreSQL17 Server 
=========================================

** 하기 EF CORE 공통 패키지 필수 설치 후 진행하기
Microsoft.EntityFrameworkCore 8.0.11 설치 
Microsoft.EntityFrameworkCore.Design 8.0.11 설치 
Microsoft.EntityFrameworkCore.Tools 8.0.11 설치 



Step1) PostgreSQL 서버용 EF Core8 패키지 설치하기 

Npgsql.EntityFrameworkCore.PostgreSQL 8.0.11 설치 



Step2) 모델 클래스 생성하기 
Models/Channel.cs

    public class Channel
    {
        public int ChannelIdx { get; set; }

        public string ChannelName { get; set; }
        public string? ChannelDesc { get; set; }

        ...

        public int? ModifyMemberIdx { get; set; }
        public DateTime? ModifyDate { get; set; }
    }



Step3) DBContext 클래스 구현하기 
-Models/ChatAppDbContext.cs
  using Microsoft.EntityFrameworkCore;
  public class ChatAppDbContext : DbContext
  {
       public ChatAppDbContext(DbContextOptions<ChatAppDbContext> options) : base(options)
        {
        }
              
       public DbSet<Channel> Channels { get; set; }

       protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            //channel 테이블 정의
            modelBuilder.Entity<Channel>(entity =>
            {
                entity.ToTable("channels");

                entity.Property(e => e.ChannelIdx).UseIdentityColumn();
                entity.Property(e => e.ChannelIdx).HasColumnName("channel_idx");
                entity.HasKey(e => e.ChannelIdx).HasName("channel_pk");

                entity.Property(e => e.ChannelName).HasColumnName("channel_name").HasMaxLength(100);
                entity.Property(e => e.ChannelDesc).HasColumnName("channel_desc").HasMaxLength(500).IsRequired(false);
                 .....

                entity.Property(e => e.ModifyMemberIdx).HasColumnName("modify_member_idx").IsRequired(false);
                entity.Property(e => e.ModifyDate).HasColumnName("modify_date").IsRequired(false).HasColumnType("timestamp without time zone");

            });
        }
      
  }

Step4) DB연결 설정파일 구성하기 
- appsettings.json 

   "ConnectionStrings": {
        "DefaultConnection": "Host=127.0.0.1;Database=corechatapp;Username=postgres;Password=eddy524640!"
    }


Step5) 시작 모듈에 DBContext 서비스 의존성 주입처리 
-Program.cs 

using EFCoreForPostgreSQL.Models;
using Microsoft.EntityFrameworkCore;

string? rdbConString = builder.Configuration.GetConnectionString("DefaultConnection");

builder.Services.AddDbContext<ChatAppDbContext>(c => c.UseNpgsql(rdbConString));



Step6) Code First방식으로 물리적 테이블 생성하기 
dotnet-ef CLI툴설치하기 
https://learn.microsoft.com/en-us/ef/core/cli/dotnet

도구>Nuget 팩키지 관리자 콘솔에서 실행
dotnet tool install --global dotnet-ef --version 8.0.11

dotnet-ef 설치여부확인하기 
dotnet ef 

cd ls
cd 프로젝트로 이동 

dotnet ef migrations add InitialCreate -o Models/Migrations

dotnet ef database update


Step7) 데이터베이스에 테이블 생성여부 확인하기 







==========================================
5)EF Core 8.0.11 For MySQL8.0 Server 
==========================================

** 하기 EF CORE 공통 패키지 필수 설치 후 진행하기
Microsoft.EntityFrameworkCore 8.0.11 설치 
Microsoft.EntityFrameworkCore.Design 8.0.11 설치 
Microsoft.EntityFrameworkCore.Tools 8.0.11 설치 



Step1) MySql 서버용 EF Core8 패키지 설치하기 

Pomelo.EntityFrameworkCore.MySql 8.0.2 설치 



Step2) 모델 클래스 생성하기 
Models/Channel.cs

    public class Channel
    {
        public int ChannelIdx { get; set; }

        public string ChannelName { get; set; }
        public string? ChannelDesc { get; set; }

        ...

        public int? ModifyMemberIdx { get; set; }
        public DateTime? ModifyDate { get; set; }
    }



Step3) DBContext 클래스 구현하기 
-Models/ChatAppDbContext.cs
  using Microsoft.EntityFrameworkCore;
  public class ChatAppDbContext : DbContext
  {
       public ChatAppDbContext(DbContextOptions<ChatAppDbContext> options) : base(options)
        {
        }
              
       public DbSet<Channel> Channels { get; set; }

       protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            //channel 테이블 정의
            modelBuilder.Entity<Channel>(entity =>
            {
                entity.ToTable("channels");

                entity.Property(e => e.ChannelIdx).UseMySqlIdentityColumn();
                entity.Property(e => e.ChannelIdx).HasColumnName("channel_idx");
                entity.HasKey(e => e.ChannelIdx).HasName("channel_pk");

                entity.Property(e => e.ChannelName).HasColumnName("channel_name").HasMaxLength(100);
                entity.Property(e => e.ChannelDesc).HasColumnName("channel_desc").HasMaxLength(500).IsRequired(false);
                 .....

                entity.Property(e => e.ModifyMemberIdx).HasColumnName("modify_member_idx").IsRequired(false);
                entity.Property(e => e.ModifyDate).HasColumnName("modify_date").IsRequired(false);

            });
        }
      
  }

Step4) DB연결 설정파일 구성하기 
- appsettings.json 

   "ConnectionStrings": {
        "DefaultConnection": "Server=127.0.0.1;Database=corechatapp;User=root;Password=eddy524640!;"
    }


Step5) 시작 모듈에 DBContext 서비스 의존성 주입처리 
-Program.cs 

using EFCoreForMySQL.Models;
using Microsoft.EntityFrameworkCore;

string? rdbConString = builder.Configuration.GetConnectionString("DefaultConnection");

var serverVersion = new MySqlServerVersion(new Version(8, 0, 29));

builder.Services.AddDbContext<ChatAppDbContext>(c => c.UseMySql(rdbConString, serverVersion).LogTo(Console.WriteLine, LogLevel.Information)
                .EnableSensitiveDataLogging()
                .EnableDetailedErrors());




Step6) Code First방식으로 물리적 테이블 생성하기 
dotnet-ef CLI툴설치하기 
https://learn.microsoft.com/en-us/ef/core/cli/dotnet

도구>Nuget 팩키지 관리자 콘솔에서 실행
dotnet tool install --global dotnet-ef --version 8.0.11

dotnet-ef 설치여부확인하기 
dotnet ef 

cd ls
cd 프로젝트로 이동 

dotnet ef migrations add InitialCreate -o Models/Migrations

dotnet ef database update


Step7) 데이터베이스에 테이블 생성여부 확인하기 

